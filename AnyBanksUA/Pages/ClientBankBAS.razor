@page "/"
@page "/bas"
@page "/basbanksutility/bas"
@using System.IO
@using Sabatex.BankStatementHelper
@using sabatex.Extensions.ClassExtensions
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using Sabatex.RadzenBlazor

@inject IJSRuntime JSRuntime
<PageTitle>Обробка банківських виписок</PageTitle>

<p>
    Дана програма призначена для перетворення виписок клієнтбанків (iFobs, iBank 2 UA, ПриватБанк, УКРГАЗБанк) України в формат придатний для завантаження програмами BAS
</p>

<RadzenRow class="mt-1">
    <RadzenColumn >
        <RadzenRadioButtonList @bind-Value="@bankType" TValue="EBankType" Orientation="Radzen.Orientation.Vertical" class="rz-border-radius-1 rz-border-primary-dark ">
    <Items>
        @{
            foreach (var eBank in stringBankPresents)
            {
                <RadzenRadioButtonListItem Text="@eBank.Value" Value=@eBank.Key class="ms-2 " />
            }
        }

    </Items>

</RadzenRadioButtonList>
    </RadzenColumn>
    <RadzenColumn class="d-flex">
    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height:auto">
            <RadzenPanel AllowCollapse="true" Collapsed="true">
                <HeaderTemplate>
                    <RadzenText TextStyle="TextStyle.H6" Class="rz-display-flex rz-align-items-center rz-m-0">Протестовано для конфігурацій:</RadzenText>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenCard>
                        <ul>
                            <li><RadzenText>Бухгалтерія Для України 2</RadzenText></li>
                            <li><RadzenText>Управління нашою фірмою 1.6</RadzenText></li>
                            <li><RadzenText>Управління торговим підприємством</RadzenText></li>
                            <li><RadzenText>BAS Бухгалтерія</RadzenText></li>
                            <li><RadzenText>BAS Corp</RadzenText></li>
                        </ul>
                    </RadzenCard>
                </ChildContent>
            </RadzenPanel>
            <label for="uploadFiles" style="
        box-shadow: 0 2px 7px #4caf50;
        display: inline-flex;
        width: 200px;
        justify-content: space-around;
        border-radius: 2em;
        color: white;
        border:2px solid;
        cursor: pointer;
        align-items: center;
        padding:16px;
        background-color: #4caf50;">Виберіть файли<RadzenIcon Icon="backup" /></label>
            <InputFile id="uploadFiles" hidden multiple OnChange="HandleSelection" />


    </RadzenStack>
    </RadzenColumn>
</RadzenRow>


@if (makeFiles.Count() != 0)
{
    <RadzenText>Оброблено файли:</RadzenText>
    <RadzenDataGrid TItem="ResultTask" Data="@makeFiles">
        <Columns>
            <RadzenDataGridColumn TItem="ResultTask" Property="InputFile" Title="Вхідний файл" />
            <RadzenDataGridColumn TItem="ResultTask" Property="OutPutFile" Title="Вихідний файл" />
            <RadzenDataGridColumn TItem="ResultTask" Property="Result" Title="Результат обробки" />
        </Columns>   
    </RadzenDataGrid>    
 

    <RadzenAlert>Файли знаходяться в папці Завантаження</RadzenAlert>
 }

@code{
    private EBankType bankType = EBankType.iBankUA;
    string accountNumber = "";
    string error = "";
    List<ResultTask> makeFiles = new List<ResultTask>();

    private Dictionary<EBankType, string> stringBankPresents = new Dictionary<EBankType, string>
        {
            //{EBankType.iFobsUA_XML, "iFobs формат файла XML (ZIP)"},
            //{EBankType.iFobsUA_TXT, "iFobs формат файла TXT (DAT)" },
            {EBankType.iFobs,"iFobs формат вивантаження XML/TXT (XML,DAT,ZIP)" },
            {EBankType.iBankUA, "iBank формат файла ТХТ (csv)"},
            {EBankType.PrivatUA,"ПриватБанк формат файла ТХТ (csv)"},
            {EBankType.OtpBankSK,"OTP Bank Словатчина формат  файла CSV"},
            {EBankType.PrimaBankSK,"PrimaBanka Словатчина формат  файла CSV"},
            {EBankType.UkrGazBank,"УКРГАЗБАНК формат  файла CSV"},
            {EBankType.Oschad,"Ощад банк формат  файла CSV"}
        };

    async Task HandleSelection(InputFileChangeEventArgs files)
    {
        byte[] buffer = new byte[512000];
        error = "";
        makeFiles.Clear();
        var mf = new List<string>();
        foreach (var f in files.GetMultipleFiles())
        {
            var resultTask = new ResultTask
                {
                    InputFile = f.Name,
                    OutPutFile = f.Name + ".xml",
                    Result = "Ok"
                };
            try
            {
                // get coverter
                var converter = ClientBankTo1CFormatConversion.GetConvertor(bankType);
                await converter.ImportFromFileAsync(f.OpenReadStream(), Path.GetExtension(f.Name));
                if (converter.Count() > 0)
                    await JSRuntime.InvokeAsync<object>("sabatex.downloadFile", resultTask.OutPutFile, converter.GetAsXML());
                else
                    resultTask.Result = "Пропущений";

            }
            catch (Exception e)
            {
                resultTask.Result = e.Message;
            }
            makeFiles.Add(resultTask);
        }
    }


    void BankTypeChange(EBankType value)
    {
        bankType = value;
    }

    override protected  void OnInitialized()
    {
        base.OnInitialized();
        
    }

 }
